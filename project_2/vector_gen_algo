gen_vector(max_size dict):
	if dict is null:
		return (make-array 0 max_size)

	x = car dict
	m = max key for each hash function for x

	vector = gen_vector(x (cdr dict))

	for each key (k) from hash fn list:
		(array-set! vector k 1)

	return vector

------------

Scheme:

(define set_true
	(lambda (indices vector)
		(if
			(null? indices)
			vector
			(let
				((temp (array-set! vector 1 (car indicies))))
				(set_true (cdr indices) vector)))))

(define hash_keys
	(lambda (fn_list w)
		(if
			(null? fn_list)
			'()
			(append ((car fn_list) w) (hash_keys (cdr fn_list))))))

(define gen_vector
	(lambda (max_size fn_list dict)
		(if
			(null? dict)
			(make-array 0 max_size)
			(letrec
				((keys (hash_keys fn_list (car dict)))
				(vector (gen_vector (max keys) fn_list (cdr dict)))
				(set_true keys vector))))))
